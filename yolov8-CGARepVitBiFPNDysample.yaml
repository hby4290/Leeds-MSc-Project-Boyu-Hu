# Ultralytics YOLO 🚀, AGPL-3.0 license
# YOLOv8 object detection model with P3-P5 outputs.

# Parameters
nc: 80  # number of classes

# Scales
scales:
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# Backbone
backbone:
  - [-1, 1, repvit_m0_9, []]
  - [-1, 1, SPPF, [1024, 5]]

# Head
head:
  - [2, 1, Conv, [256]]  # 输入 P3
  - [3, 1, Conv, [256]]  # 输入 P4
  - [5, 1, Conv, [256]]  # 输入 P5

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # P5 上采样至 P4 尺寸
  - [-1, 1, Conv, [256, 64, 1]]  # 调整 P4 的通道数至 64 以匹配 Dy_Sample
  - [-1, 1, Dy_Sample, [64, 2, 'lp', 4, False]]  # 处理调整后的 P4

  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 再次上采样 Dy_Sample 输出以匹配 P3 尺寸
  - [-1, 1, Conv, [64, 64, 1]]  # 调整 Dy_Sample 输出的通道数/尺寸以确保与 P3 匹配

  - [6, 1, Conv, [256, 64, 1]]  # 假设 P3 输出是 Layer 6, 调整至 64 通道
  - [-1, 1, nn.Upsample, [None, 2, 'nearest']]  # 确保 P3 输出与上述层尺寸相同

  - [[-1, 9], 1, Bi_FPN, []]  # 确保层 9 (调整后 Dy_Sample) 和层 8 (调整后 P3) 尺寸相同
  - [-1, 1, C2f_CGA, [256, True]]
  # 其他层继续

  - [1, 1, Conv, [256, 3, 2]] # P2 提升至 P3
  - [[-1, 6, 14], 1, Bi_FPN, []] # 再次使用 BiFPN
  - [-1, 1, C2f_CGA, [256, True]]

  - [-1, 1, Conv, [256, 3, 2]] # P3 提升至 P4
  - [[-1, 7, 11], 1, Bi_FPN, []]
  - [-1, 1, C2f_CGA, [512, True]]

  - [-1, 1, Conv, [256, 3, 2]] # P4 提升至 P5
  - [[-1, 8], 1, Bi_FPN, []]
  - [-1, 1, C2f_CGA, [1024, True]]

  - [[17, 20, 23], 1, Detect, [nc]]  # 使用处理后的 P3, P4, P5 进行检测
