import cv2
import numpy as np

def restore_masks_to_image(mask_data, image_path, output_path):
    # 读取图像
    img = cv2.imread(image_path)
    
    # 将掩码数据还原到图像上
    for mask in mask_data:
        values = list(map(float, mask.split()))
        class_id = int(values[0])
        mask_values = values[1:]

        # 将掩码数据转换为NumPy数组
        mask_array = np.array(mask_values, dtype=np.float32).reshape((int(len(mask_values) / 2), 2))

        # 将相对于图像大小的百分比转换为具体坐标值
        mask_array[:, 0] *= img.shape[1]  # 宽度
        mask_array[:, 1] *= img.shape[0]  # 高度

        # 将坐标值转换为整数
        mask_array = mask_array.astype(np.int32)

        # 在图像上绘制掩码
        cv2.polylines(img, [mask_array], isClosed=True, color=(0, 255, 0), thickness=2)

        # 在图像上绘制每个坐标点
        for point in mask_array:
            cv2.circle(img, tuple(point), 3, (255, 0, 0), -1)  # -1 表示填充圆

    # 保存带有掩码和坐标点的图像
    cv2.imwrite(output_path, img)


if __name__ == "__main__":
    mask_data = [
        "3.000000 0.333333 0.000000 0.277778 0.023810 0.222222 0.023810 0.166667 0.047619 0.111111 0.047619 0.055556 0.071429 0.000000 0.095238 0.000000 0.119048 0.000000 0.142857 0.000000 0.166667 0.000000 0.190476 0.000000 0.214286 0.000000 0.238095 0.000000 0.261905 0.000000 0.285714 0.000000 0.309524 0.000000 0.333333 0.000000 0.357143 0.000000 0.380952 0.000000 0.404762 0.000000 0.428571 0.000000 0.452381 0.000000 0.476190 0.000000 0.500000 0.000000 0.523810 0.000000 0.547619 0.000000 0.571429 0.000000 0.595238 0.000000 0.619048 0.000000 0.642857 0.000000 0.666667 0.000000 0.690476 0.000000 0.714286 0.000000 0.738095 0.000000 0.761905 0.000000 0.785714 0.000000 0.809524 0.000000 0.833333 0.000000 0.857143 0.000000 0.880952 0.000000 0.904762 0.000000 0.928571 0.055556 0.928571 0.111111 0.952381 0.166667 0.952381 0.222222 0.952381 0.277778 0.952381 0.333333 0.952381 0.388889 0.952381 0.444444 0.952381 0.500000 0.952381 0.555556 0.952381 0.611111 0.976190 0.666667 0.952381 0.722222 0.952381 0.777778 0.952381 0.833333 0.928571 0.888889 0.904762 0.944444 0.880952 0.944444 0.857143 0.944444 0.833333 0.944444 0.809524 0.944444 0.785714 0.944444 0.761905 0.944444 0.738095 0.944444 0.714286 0.944444 0.690476 0.944444 0.666667 0.944444 0.642857 0.944444 0.619048 0.944444 0.595238 0.944444 0.571429 0.944444 0.547619 0.944444 0.523810 0.944444 0.500000 0.944444 0.476190 0.944444 0.452381 0.944444 0.428571 0.944444 0.404762 0.944444 0.380952 0.944444 0.357143 0.944444 0.333333 0.944444 0.309524 0.944444 0.285714 0.944444 0.261905 0.944444 0.238095 0.944444 0.214286 0.944444 0.190476 0.944444 0.166667 0.944444 0.142857 0.944444 0.119048 0.944444 0.095238 0.944444 0.071429 0.888889 0.071429 0.833333 0.047619 0.777778 0.023810 0.722222 0.023810 0.666667 0.023810 0.611111 0.023810 0.555556 0.023810 0.500000 0.023810 0.444444 0.023810 0.388889 0.023810"]

    image_path = "/root/yolov8/ultralytics/datasets/iSAID/testset/P0002.png"
    output_path = "/root/yolov8/ultralytics/datasets/iSAID/testset/P0002_out.png"

    restore_masks_to_image(mask_data, image_path, output_path)


